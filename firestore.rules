
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an authenticated admin
    function isAdmin() {
      // Keep this list in sync with use-auth.tsx and admin-actions.ts
      let ADMIN_EMAILS = ["gres7132@gmail.com"];
      return request.auth != null && request.auth.token.email in ADMIN_EMAILS;
    }

    // Publicly readable collections (tiers, packages)
    match /commissionTiers/{tierId} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can create, update, delete
    }
    match /contributorTiers/{tierId} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can create, update, delete
    }
    match /silverLevelPackages/{packageId} {
      allow read: if true;
      allow write: if isAdmin(); // Only admins can create, update, delete
    }

    // User-specific data
    match /users/{userId} {
      // A user can read/write their own document
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Admins can also read user documents
      allow get: if isAdmin();
      // Admins can update a user's `hasActiveInvestment` status
      allow update: if isAdmin() && request.resource.data.keys().hasOnly(['hasActiveInvestment']);
      
      // Investments are subcollections of users
      match /investments/{investmentId} {
        // A user can read their own investments
        allow read: if request.auth != null && request.auth.uid == userId;
        // Investments can only be created/deleted via backend flows, so no direct client write access
        allow write: if false; 
      }
    }
    
    // User stats can be read by the owner, and read/written by admins via flows
    match /userStats/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      // All writes should happen via secure backend flows
      allow write: if false;
    }

    // Transaction proofs can be created by any authenticated user
    match /transactionProofs/{proofId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only readable by admins (via backend flows)
      allow read, update, delete: if false;
    }

    // Withdrawal requests can only be created by the user via a backend flow
    match /withdrawalRequests/{reqId} {
      allow read, write: if false;
    }
    
    // Contributor applications can only be created by the user via a backend flow
    match /contributorApplications/{appId} {
      allow read, write: if false;
    }
    
    // User payment details can be read/written by the owner
    match /userPaymentDetails/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

  }
}
