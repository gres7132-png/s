rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for email uniqueness
    function isEmailUnique(email) {
      return !exists(/databases/$(database)/documents/users/$(email));
    }
    
    // --- User Data Rules ---
    match /users/{userId} {
      // Anyone can create their own user document during sign-up
      // The email address itself is used as a temporary document ID to check for uniqueness
      allow create: if request.auth != null && 
                       request.auth.token.email == request.resource.data.email &&
                       isEmailUnique(request.resource.data.email);

      // Logged-in users can only read or update their own data.
      // Admin users can read any user's data.
      allow read, update: if request.auth != null && (
                            request.auth.uid == userId ||
                            request.auth.token.email in ["gres7132@gmail.com"]
                          );
                          
       // No one can delete user documents directly.
      allow delete: if false;

      // --- Subcollections ---
      match /investments/{investmentId} {
        // Users can read their own investments. Admins can read anyone's.
         allow read: if request.auth != null && (
                      request.auth.uid == userId ||
                      request.auth.token.email in ["gres7132@gmail.com"]
                    );
        // Only backend (admin) flows can create, update, or delete investments.
        allow write: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"];
      }
    }

    // --- User Stats Rules ---
    match /userStats/{userId} {
      // Users can read their own stats. Admins can read anyone's.
      allow read: if request.auth != null && (
                      request.auth.uid == userId ||
                      request.auth.token.email in ["gres7132@gmail.com"]
                  );
      // Only backend (admin) flows can write to user stats.
      allow write: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"];
    }

    // --- User Payment Details Rules ---
     match /userPaymentDetails/{userId} {
        // Users can read and write to their own payment details.
        allow read, write: if request.auth != null && request.auth.uid == userId;
     }

    // --- Publicly Readable Data ---
    match /silverLevelPackages/{packageId} {
      allow read: if true; // Anyone can read investment packages
      allow write: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"]; // Only admins can modify
    }
    match /contributorTiers/{tierId} {
       allow read: if true; // Anyone can read contributor tiers
       allow write: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"]; // Only admins can modify
    }
    match /commissionTiers/{tierId} {
       allow read: if true; // Anyone can read commission tiers
       allow write: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"]; // Only admins can modify
    }

    // --- Admin-Only Writable Collections ---
    // These collections are for processing requests from users.
    // The documents are created by users but can only be modified by admins via backend flows.
    match /transactionProofs/{proofId} {
        // Logged-in users can create proofs
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read and update (approve/reject)
        allow read, update: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"];
        allow delete: if false;
    }
     match /withdrawalRequests/{requestId} {
        // Logged-in users can create requests
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read and update (approve/reject)
        allow read, update: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"];
        allow delete: if false;
    }
    match /contributorApplications/{applicationId} {
        // Logged-in users can create applications
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
        // Admins can read and update (approve/reject)
        allow read, update: if request.auth != null && request.auth.token.email in ["gres7132@gmail.com"];
        allow delete: if false;
    }
  }
}
