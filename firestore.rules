
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAdmin() {
      // This list MUST be kept in sync with the one in your backend code (e.g., user-management.ts)
      let ADMIN_EMAILS = ["gres7132@gmail.com"];
      return request.auth.token.email_verified && request.auth.token.email in ADMIN_EMAILS;
    }

    // --- User Data ---
    // Users can read/write their own data. Admins can read/write any user's data.
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    match /userStats/{userId} {
      // Users can read their own stats.
      allow get: if isOwner(userId);
      // Admins can read/write any user's stats.
      allow read, write: if isAdmin();
      // Allow server-side investment flow to decrement balance.
      // This is less secure but necessary if not using a callable function with context.
      // A better approach is to use a callable function and check invoker identity.
      // For now, we trust authenticated users not to call this out of context.
      allow update: if request.auth != null && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['availableBalance', 'todaysEarnings', 'rechargeAmount', 'withdrawalAmount']);
    }

    match /userPaymentDetails/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // --- Public Game Data (read-only for users, writable by admins) ---
    match /silverLevelPackages/{packageId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /commissionTiers/{tierId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    match /contributorTiers/{tierId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // --- Investments (user-specific subcollection) ---
    match /users/{userId}/investments/{investmentId} {
      // User can create their own investment records.
      // User can read their own investment records.
      allow create, read: if isOwner(userId);
      // Admins can manage any investment.
      allow read, write, delete: if isAdmin();
    }
    
    // --- Transaction Proofs (Deposits) ---
    match /transactionProofs/{proofId} {
      // Users can create their own deposit proofs.
      allow create: if request.auth.uid == request.resource.data.userId;
      // Admins can read and update any proof (e.g., to approve/reject).
      allow read, update: if isAdmin();
    }
    
    // --- Withdrawal Requests ---
    match /withdrawalRequests/{reqId} {
       // Users can create their own withdrawal requests.
       allow create: if request.auth.uid == request.resource.data.userId;
       // Admins can read and update any request.
       allow read, update: if isAdmin();
    }
    
     // --- Contributor Applications ---
    match /contributorApplications/{appId} {
       // Users can create their own applications.
       allow create: if request.auth.uid == request.resource.data.userId;
       // Admins can read and update any application.
       allow read, update: if isAdmin();
    }
  }
}
