rules_version = '2';

// --- Admin Configuration ---
// This list MUST be kept in sync with the ADMIN_EMAILS array in src/hooks/use-auth.tsx
function getAdminEmails() {
  return ["gres7132@gmail.com"];
}

// --- Helper Functions ---
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return request.auth.uid == userId;
}

// Checks if the requesting user's email is in the admin list.
function isAdmin() {
  return isAuthenticated() && request.auth.token.email in getAdminEmails();
}

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- User Data ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // --- User-Specific Subcollections (investments, referrals) ---
    match /users/{userId}/{collectionId}/{docId} {
       allow read, write: if isOwner(userId);
       // Admins can also read this data for support/verification
       allow read: if isAdmin();
    }
    
    // --- User Stats ---
    match /userStats/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Only admins can directly write to stats (e.g., approving deposits)
      allow write: if isAdmin();
    }
    
    // --- User Payment Details ---
    match /userPaymentDetails/{userId} {
       allow read, write: if isOwner(userId);
    }

    // --- Investment Packages (Admin Writable) ---
    match /silverLevelPackages/{packageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // --- Distributor Tiers (Admin Writable) ---
    match /distributorTiers/{tierId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // --- Commission Tiers (Admin Writable) ---
    match /commissionTiers/{tierId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // --- Transaction Proofs (Deposits) ---
    match /transactionProofs/{proofId} {
        allow create: if isAuthenticated();
        allow read, update: if isAdmin() || isOwner(request.resource.data.userId);
    }
    
    // --- Withdrawal Requests ---
    match /withdrawalRequests/{reqId} {
        allow create: if isAuthenticated();
        allow read, update: if isAdmin() || isOwner(request.resource.data.userId);
    }

    // --- Distributor Purchases (Log for Admin) ---
    // User can create through a transaction, admin can read the log.
    match /distributorPurchases/{purchaseId} {
        allow read: if isAdmin();
        // Client-side writes are disallowed. Writes only happen via secure backend transaction.
        allow write: if false; 
    }
  }
}
