rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Use the email claim from the token. This is more secure than checking a document.
      // Ensure your admin emails are stored in your application's secure config.
      // This list MUST be kept in sync with the one in src/hooks/use-auth.tsx and src/ai/flows/user-management.ts
      return request.auth.token.email in ["gres7132@gmail.com"];
    }

    // --- User Data Rules ---
    match /users/{userId} {
      // Admins can read/write any user document.
      allow read, write: if isAdmin();
      // Users can only read/write their own document.
      allow read, write: if isOwner(userId);
      // New users can be created if they are authenticated.
      allow create: if request.auth != null;
    }

    match /userStats/{userId} {
       // Admins can read any user's stats, but writes are handled by secure flows.
      allow read: if isAdmin();
      // Users can only read their own stats. Writes are handled by secure flows to prevent tampering.
      allow read: if isOwner(userId);
       // Allow writes only from admin-run backend flows (implicitly trusted)
       // or for creating the initial doc during signup. No direct client writes.
       allow write: if false; 
    }
    
    match /userPaymentDetails/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin();
    }
    
    match /users/{userId}/investments/{investmentId} {
        // Admins can read/write any investment record
        allow read, write: if isAdmin();
        // Users can read their own investments, and create new ones (via investPackage flow)
        allow read, create: if isOwner(userId);
    }
    
    // --- Publicly Readable Config Data ---
    match /silverLevelPackages/{packageId} {
        // All authenticated users can read packages to see what's available to buy
        allow read: if request.auth != null;
        // Only admins can create, update, or delete packages
        allow write: if isAdmin();
    }
     match /commissionTiers/{tierId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
     match /contributorTiers/{tierId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    // --- Transaction & Application Rules ---
    match /transactionProofs/{proofId} {
        // Admins can read all proofs and update their status
        allow read, update: if isAdmin();
        // Users can create their own deposit proofs
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    match /withdrawalRequests/{requestId} {
        allow read, update: if isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
    }
    
     match /contributorApplications/{applicationId} {
        allow read: if request.auth.uid == resource.data.userId || isAdmin();
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if isAdmin();
    }

    // --- Rule to enforce unique emails during signup ---
    // This is a special rule for a temporary collection used during sign up
    // to check for email uniqueness before creating the final user account.
    // See `src/components/auth-form.tsx` for usage.
    match /users/{email} {
      allow create: if !exists(/databases/$(database)/documents/users/$(email));
      allow delete: if request.auth != null;
    }
  }
}
