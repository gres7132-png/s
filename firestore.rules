
rules_version = '2';

// --- Admin Configuration ---
// This list MUST be kept in sync with the ADMIN_EMAILS array in src/hooks/use-auth.tsx
function getAdminEmails() {
  return ["gres7132@gmail.com"];
}

// --- Helper Functions ---
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return request.auth.uid == userId;
}

// Checks if the requesting user's email is in the admin list.
function isAdmin() {
  return isAuthenticated() && request.auth.token.email in getAdminEmails();
}

// This function checks that only a specific set of non-sensitive fields are being accessed.
// Used to allow the public "Live Transactions" feed to work without exposing user data.
function isPublicTransactionRead() {
  return isAuthenticated() 
      && resource.data.keys().hasOnly(['userName', 'amount', 'timestamp', 'type', 'submittedAt', 'requestedAt']);
}

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- User Data ---
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId);
    }
    
    // --- User-Specific Subcollections (investments, referrals) ---
    match /users/{userId}/{collectionId}/{docId} {
       allow read, write: if isOwner(userId);
       allow read: if isAdmin();
    }
    
    // --- User Stats ---
    match /userStats/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      // Only admin can update balances during transaction approvals.
      // User balances are updated via secure backend transactions.
      allow write: if isAdmin();
    }
    
    // --- User Payment Details ---
    match /userPaymentDetails/{userId} {
       // User can read and write their own details. Admin can only read.
       allow read: if isOwner(userId) || isAdmin();
       allow write: if isOwner(userId);
    }

    // --- Investment Packages (Admin Writable) ---
    match /silverLevelPackages/{packageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // --- Distributor Tiers (Admin Writable) ---
    match /distributorTiers/{tierId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // --- Commission Tiers (Admin Writable) ---
    match /commissionTiers/{tierId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // --- Transaction Proofs (Deposits) ---
    match /transactionProofs/{proofId} {
        // Admins can read anything. Users can read their own. Public feed can list.
        allow list: if isAuthenticated();
        allow read: if isAdmin() || isOwner(request.resource.data.userId);
        allow create: if isAuthenticated();
        allow update: if isAdmin();
    }
    
    // --- Withdrawal Requests ---
    match /withdrawalRequests/{reqId} {
        // Admins can read anything. Users can read their own. Public feed can list.
        allow list: if isAuthenticated();
        allow read: if isAdmin() || isOwner(request.resource.data.userId);
        allow create: if isAuthenticated();
        allow update: if isAdmin();
    }
    
    // --- Commission Applications (User can apply, Admin can manage) ---
    match /commissionApplications/{appId} {
        allow read: if isAdmin() || isOwner(request.resource.data.userId);
        allow create: if isAuthenticated();
        allow update: if isAdmin();
    }

    // --- Distributor Purchases (Log for Admin) ---
    match /distributorPurchases/{purchaseId} {
        allow read: if isAdmin();
        // Writes are handled by secure backend transactions, so no direct client write rule is needed.
        allow write: if false; 
    }
  }
}

    