
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Admin Emails ---
    // This is a secure way to define a list of admin users by their email address.
    // Ensure these emails match those in your `use-auth.tsx` hook.
    function getAdminEmails() {
      return ["gres7132@gmail.com"];
    }

    // --- Helper Functions ---
    // Checks if the requesting user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Checks if the requesting user's email is in the admin list.
    function isAdmin() {
      return isSignedIn() && request.auth.token.email in getAdminEmails();
    }
    
    // Checks if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- User Data Rules (users/{userId}) ---
    match /users/{userId} {
      // Admins can read any user's profile.
      // Users can read/write their own profile.
      allow read, write: if isSignedIn() && (isOwner(userId) || isAdmin());

      // --- Subcollections for a specific user ---
      // Investments: Users can read their own, Admins can read any.
      match /investments/{investmentId} {
        allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
        // Only backend/server-side logic should create/update investments.
        allow write: if false; 
      }

      // Referrals: Users can read their own, Admins can read any.
      match /referrals/{referralId} {
        allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
         // Only backend logic should create this record during signup.
        allow write: if false;
      }
    }

    // --- User Stats Rules (userStats/{userId}) ---
    match /userStats/{userId} {
      // Admins can read/write any user's stats (for approvals).
      // Users can only read their own stats.
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow write: if isAdmin(); // Crucial for admins to approve transactions
    }
    
    // --- User Payment Details Rules ---
    match /userPaymentDetails/{userId} {
        // Users can create and update their own payment details.
        // Admins can read anyone's details to process withdrawals.
        allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
        allow write: if isSignedIn() && isOwner(userId);
    }

    // --- Public Data Rules (readable by any signed-in user) ---
    match /silverLevelPackages/{packageId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // Only Admins can create/delete packages
    }
    match /distributorTiers/{tierId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // Only Admins can create/delete tiers
    }
     match /commissionTiers/{tierId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // Only Admins can create/delete tiers
    }

    // --- Transaction Rules (Deposits and Withdrawals) ---
    match /transactionProofs/{proofId} {
      // Users can create their own deposit proofs.
      // Admins can read all proofs and update their status (approve/reject).
      allow create: if isSignedIn();
      allow read, update: if isAdmin();
    }

    match /withdrawalRequests/{requestId} {
      // Users can create their own withdrawal requests.
      // Admins can read all requests and update their status.
      allow create: if isSignedIn();
      allow read, update: if isAdmin();
    }
    
     // --- Earnings Log Rules (For server-side processing) ---
    match /earningsLog/{userId} {
        // Only backend processes should access this. No client access.
        allow read, write: if false;
    }
  }
}
