
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user with a given email already exists.
    function emailExists(email) {
      return exists(/databases/$(database)/documents/users/$(email));
    }

    match /users/{userId} {
      // Anyone can create a user document IF their email is not already in use.
      // We use the email as the document ID for this check to work efficiently.
      allow create: if !emailExists(request.resource.data.email);
      
      // Logged-in users can read, update, or delete their own document.
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId}/{document=**} {
      // Allow full access for a logged-in user to subcollections within their own user document.
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- Admin-only collections ---
    function isAdmin() {
        // This email MUST match the one in your use-auth.tsx and user-management.ts
        return request.auth.token.email == "gres7132@gmail.com";
    }

    match /silverLevelPackages/{packageId} {
      // Any authenticated user can read the packages to see what's available.
      allow read: if request.auth != null;
      // Only admins can create, update, or delete investment packages.
      allow write: if isAdmin();
    }
    
    match /contributorTiers/{tierId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }
    
    match /commissionTiers/{tierId} {
        allow read: if request.auth != null;
        allow write: if isAdmin();
    }

    // --- Transaction & Approval collections ---
    
    // Any authenticated user can create proofs/requests. Only admins can read/update them.
    match /transactionProofs/{proofId} {
        allow create: if request.auth != null;
        allow read, update: if isAdmin();
    }
    
    match /withdrawalRequests/{reqId} {
        allow create: if request.auth != null;
        allow read, update: if isAdmin();
    }

    match /contributorApplications/{appId} {
        allow create: if request.auth != null;
        allow read, update: if isAdmin();
    }
    
    // --- User Stats and Payment Details ---
    match /userStats/{userId} {
        // A user can read their own stats. Admins can read anyone's stats.
        allow read: if (request.auth != null && request.auth.uid == userId) || isAdmin();
        // Writes are handled by secure backend flows, so direct client writes are disallowed.
        allow write: if false; 
    }
    
    match /userPaymentDetails/{userId} {
        // A user can manage their own payment details.
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
