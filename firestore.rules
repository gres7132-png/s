rules_version = '2';

// --- Admin Configuration ---
// This list MUST be kept in sync with the ADMIN_EMAILS array in src/hooks/use-auth.tsx
function getAdminEmails() {
  return ["gres7132@gmail.com"];
}

// --- Helper Functions ---
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return isAuthenticated() && request.auth.uid == userId;
}

function isAdmin() {
  return isAuthenticated() && request.auth.token.email in getAdminEmails();
}

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- User-Specific Data ---
    // Users can manage their own data. Admins can manage all user data.
    match /users/{userId}/{path=**} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // --- User Stats ---
    // Users can read their own stats. Admins can read/write all stats.
    match /userStats/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
      allow create: if isOwner(userId) || isAdmin(); // Allow admin to create if missing
    }
    
    // --- User Payment Details ---
    // Users can manage their own payment details. Admins can manage all.
    match /userPaymentDetails/{userId} {
       allow read, write: if isOwner(userId) || isAdmin();
    }

    // --- Publicly Readable, Admin-Writable Collections ---
    match /silverLevelPackages/{packageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /contributorTiers/{tierId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    match /commissionTiers/{tierId} {
        allow read: if isAuthenticated();
        allow write: if isAdmin();
    }

    // --- Transaction & Application Collections ---
    // Users can create their own requests. They can only read their own.
    // Admins have full read/write access to all requests.
    match /transactionProofs/{proofId} {
        allow create: if isAuthenticated();
        allow read, update, delete: if isAdmin() || (isOwner(request.resource.data.userId));
    }
    match /withdrawalRequests/{reqId} {
        allow create: if isAuthenticated();
        allow read, update, delete: if isAdmin() || (isOwner(request.resource.data.userId));
    }
     match /contributorApplications/{appId} {
        allow create: if isAuthenticated();
        allow read, update, delete: if isAdmin() || (isOwner(request.resource.data.userId));
    }

    // --- Definitive Admin Super-User Rule ---
    // This is a catch-all rule that grants admins full access to any document.
    // This ensures an admin is never blocked from managing any part of the database.
    // It is placed last to be evaluated after more specific rules.
    match /{path=**}/{document} {
      allow read, write: if isAdmin();
    }
  }
}
